"use strict";(self.webpackChunkmaskito=self.webpackChunkmaskito||[]).push([[1505],{70997:function(e,t,i){i.d(t,{fV:function(){return s}});var r=i(74788),a=i(75453);let s=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=r.oAB({type:e}),e.\u0275inj=r.cJS({imports:[a.JF,a.mG,a.Lx,a.Lq,a.u4]}),e})()},31505:function(e,t,i){i.r(t),i.d(t,{WhatIsMaskitoDocPageModule:function(){return Z}});var r=i(12057),a=i(55358),s=i(70997),o=i(44427),n=i(82847),u=i(46841),c=i(45019),l=i(74788),g=i(75453);let p=(()=>{class e{constructor(){this.maskitoLibrariesDocPage="/getting-started/maskito-libraries",this.coreConceptsOverviewDocPage="/core-concepts/overview",this.angularDocPage="/javascript-frameworks/angular",this.reactDocPage="/javascript-frameworks/react"}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=l.Xpm({type:e,selectors:[["what-is-maskito-doc-page"]],decls:73,vars:6,consts:[["header","What is Maskito?"],[1,"tui-space_top-8"],[1,"tui-list"],[1,"tui-list__item"],["href","https://www.cypress.io","target","_blank","tuiLink",""],["tuiLink","",3,"routerLink"],[1,"islands-wrapper"],["tuiIsland","",1,"island",3,"hoverable","routerLink"],[1,"tui-island__content"],["mode","link","size","s","src","tuiIconGridLarge",1,"tui-island__figure"],[1,"tui-island__title"],[1,"tui-island__paragraph"],["mode","link","size","s","src","tuiIconSettingsLarge",1,"tui-island__figure"]],template:function(e,t){1&e&&(l.TgZ(0,"tui-doc-page",0),l.TgZ(1,"div"),l.TgZ(2,"strong"),l._uU(3,"Maskito"),l.qZA(),l._uU(4," is a collection of libraries, built with TypeScript. It helps you to create an input mask which ensures that users type values according to predefined format. "),l.qZA(),l.TgZ(5,"p"),l._uU(6," Core concepts of the libraries are simple but they provide flexible API to set any format you wish: numbers, phone, date, credit card number etc. "),l.qZA(),l.TgZ(7,"section",1),l.TgZ(8,"h2"),l._uU(9,"Why Maskito?"),l.qZA(),l.TgZ(10,"ul",2),l.TgZ(11,"li",3),l.TgZ(12,"strong"),l._uU(13,"Maskito"),l.qZA(),l._uU(14," supports all user\u2019s interactions with text fields: basic typing and deleting via keyboard, pasting, dropping text inside with a pointer, browser autofill, predictive text from mobile native keyboard. "),l.qZA(),l.TgZ(15,"li",3),l.TgZ(16,"strong"),l._uU(17,"Maskito"),l.qZA(),l._uU(18," is robust. The whole project is developed with "),l.TgZ(19,"code"),l._uU(20,"strict"),l.qZA(),l._uU(21," TypeScript mode. Our code is covered by hundreds of "),l.TgZ(22,"a",4),l._uU(23," Cypress "),l.qZA(),l._uU(24," tests. "),l.qZA(),l.TgZ(25,"li",3),l._uU(26," Server Side Rendering and Shadow DOM support. "),l.qZA(),l.TgZ(27,"li",3),l._uU(28," You can use it with "),l.TgZ(29,"code"),l._uU(30,"HTMLInputElement"),l.qZA(),l._uU(31," and "),l.TgZ(32,"code"),l._uU(33,"HTMLTextAreaElement"),l.qZA(),l._uU(34," . "),l.qZA(),l.TgZ(35,"li",3),l.TgZ(36,"strong"),l._uU(37,"Maskito"),l.qZA(),l._uU(38," core is zero-dependency package. You can mask input in your vanilla JavaScript project. However, we have separate packages for "),l.TgZ(39,"a",5),l._uU(40," Angular "),l.qZA(),l._uU(41," and "),l.TgZ(42,"a",5),l._uU(43," React "),l.qZA(),l._uU(44," as well. "),l.qZA(),l.TgZ(45,"li",3),l.TgZ(46,"strong"),l._uU(47,"Maskito"),l.qZA(),l._uU(48," includes optional framework-agnostic package with configurable ready-to-use masks. "),l.qZA(),l.qZA(),l.qZA(),l.TgZ(49,"p"),l._uU(50," No textfield with invalid value! Use Maskito. "),l.TgZ(51,"strong"),l._uU(52,"Mask it!"),l.qZA(),l.qZA(),l.TgZ(53,"section",1),l.TgZ(54,"h2"),l._uU(55,"Learn about Maskito"),l.qZA(),l.TgZ(56,"div",6),l.TgZ(57,"a",7),l.TgZ(58,"div",8),l._UZ(59,"tui-marker-icon",9),l.TgZ(60,"div"),l.TgZ(61,"h3",10),l._uU(62,"Explore libraries"),l.qZA(),l.TgZ(63,"p",11),l._uU(64," Maskito consists of several libraries. Explore them and learn how to install and use them. "),l.qZA(),l.qZA(),l.qZA(),l.qZA(),l.TgZ(65,"a",7),l.TgZ(66,"div",8),l._UZ(67,"tui-marker-icon",12),l.TgZ(68,"div"),l.TgZ(69,"h3",10),l._uU(70,"Core concepts"),l.qZA(),l.TgZ(71,"p",11),l._uU(72," Learn about mask expression, preprocessors and postprocessors, overwrite mode etc. "),l.qZA(),l.qZA(),l.qZA(),l.qZA(),l.qZA(),l.qZA(),l.qZA()),2&e&&(l.xp6(39),l.Q6J("routerLink",t.angularDocPage),l.xp6(3),l.Q6J("routerLink",t.reactDocPage),l.xp6(15),l.Q6J("hoverable",!0)("routerLink",t.maskitoLibrariesDocPage),l.xp6(8),l.Q6J("hoverable",!0)("routerLink",t.coreConceptsOverviewDocPage))},directives:[g.qo,n.V,a.yS,u.h,c.B],styles:[".islands-wrapper[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;justify-content:space-between;grid-gap:2rem;gap:2rem}.island[_ngcontent-%COMP%]{flex:1;min-width:18rem}"],changeDetection:0}),e})(),Z=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=l.oAB({type:e}),e.\u0275inj=l.cJS({imports:[[r.ez,s.fV,u.y,n.j,c.z,a.Bz.forChild((0,o.Ve)(p))]]}),e})()}}]);