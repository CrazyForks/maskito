"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[8364],{8364:e=>{e.exports="import type {MaskitoOptions} from '@maskito/core';\n\nconst maskitoOptions: MaskitoOptions = {\n    mask: /^\\d{0,3}$/,\n    plugins: [\n        // This plugin dispatches custom event `maskitoReject` when a character that the\n        // user has entered is rejected by the mask. You can use it to visualize rejection.\n        element => {\n            const listener = (): void => {\n                // Save current input value\n                const value = element.value;\n\n                element.addEventListener(\n                    'beforeinput',\n                    event => {\n                        // If event was prevented and value is the same, then it was rejected\n                        if (event.defaultPrevented && value === element.value) {\n                            element.dispatchEvent(\n                                new CustomEvent('maskitoReject', {bubbles: true}),\n                            );\n                        }\n                    },\n                    {once: true},\n                );\n            };\n\n            // Using capture phase to trigger callback before any other listeners\n            element.addEventListener('beforeinput', listener, true);\n\n            // Cleanup\n            return () => element.removeEventListener('beforeinput', listener, true);\n        },\n    ],\n};\n\nexport default maskitoOptions;\n"}}]);